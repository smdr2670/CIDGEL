.TH "Rsimp.h" 3 "Thu Jul 31 2014" "Version 1.0" "CIDGEL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Rsimp.h \- 
.PP
header file for \fBRsimp\&.c\fP with definitions of linear programming data structure and basic implementation of revised simplex method\&.  

.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLP_A\fP(i, j)   LP_A[j][i]"
.br
.ti -1c
.RI "#define \fBLP_OPT\fP   0"
.br
.ti -1c
.RI "#define \fBLP_UNBD\fP   1"
.br
.ti -1c
.RI "#define \fBLP_FAIL\fP   -1"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBLP_get_space\fP (int M, int N)"
.br
.RI "\fIAllocate space for LP data structures\&. \fP"
.ti -1c
.RI "void \fBLP_free_space\fP ()"
.br
.RI "\fIDeallocates space for LP data structures\&. Sets all LP globals to 0\&. \fP"
.ti -1c
.RI "void \fBPrint_LP\fP ()"
.br
.RI "\fIprint LP data structures to stdout\&. \fP"
.ti -1c
.RI "int \fBRsimp\fP (int m, int n, double **A, double *b, double *c, double *x, int *basis, int *nonbasis, double **R, double **Q, double *t1, double *t2)"
.br
.RI "\fIrevised simplex method (Using Bland's rule) and a qr factorization to solve the linear equations \fP"
.ti -1c
.RI "void \fBGQR\fP (int r, int c, double **Q, double **R)"
.br
.RI "\fIUse givens rotations on R to bring it into triangular form\&. Store orthogonal matrix needed to bring R to triangular form in Q\&. Assume R is an rxc matrix and Q is rxr\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBLP_MAX_N\fP"
.br
.ti -1c
.RI "int \fBLP_MAX_M\fP"
.br
.ti -1c
.RI "int \fBLP_N\fP"
.br
.ti -1c
.RI "int \fBLP_M\fP"
.br
.ti -1c
.RI "double ** \fBLP_A\fP"
.br
.ti -1c
.RI "double * \fBLP_B\fP"
.br
.ti -1c
.RI "double * \fBLP_C\fP"
.br
.ti -1c
.RI "double * \fBLP_X\fP"
.br
.ti -1c
.RI "int * \fBLP_Basis\fP"
.br
.ti -1c
.RI "int * \fBLP_NonBasis\fP"
.br
.ti -1c
.RI "double ** \fBLP_Q\fP"
.br
.ti -1c
.RI "double ** \fBLP_R\fP"
.br
.ti -1c
.RI "double * \fBLP_t1\fP"
.br
.ti -1c
.RI "double * \fBLP_t2\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
header file for \fBRsimp\&.c\fP with definitions of linear programming data structure and basic implementation of revised simplex method\&. 

This file is reused from TiGERS, Toric Groebner Basis Enumeration by Reverse Search copyright (c) 1999 Birk Huber
.PP
\fBAuthor:\fP
.RS 4
Birk Huber, 4/99 
.PP
Daniel Rembold 
.RE
.PP
\fBBug\fP
.RS 4
No known bugs
.RE
.PP

.PP
Definition in file \fBRsimp\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define LP_A(i, j)   LP_A[j][i]"

.PP
Definition at line 32 of file Rsimp\&.h\&.
.SS "#define LP_FAIL   -1"

.PP
Definition at line 35 of file Rsimp\&.h\&.
.SS "#define LP_OPT   0"

.PP
Definition at line 33 of file Rsimp\&.h\&.
.SS "#define LP_UNBD   1"

.PP
Definition at line 34 of file Rsimp\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void GQR (intr, intc, double **Q, double **R)"

.PP
Use givens rotations on R to bring it into triangular form\&. Store orthogonal matrix needed to bring R to triangular form in Q\&. Assume R is an rxc matrix and Q is rxr\&. 
.PP
\fBParameters:\fP
.RS 4
\fIQ\fP Matrix Q for the QR factorization\&. 
.br
\fIR\fP Matrix R for the QR factorization\&. 
.br
\fIr\fP Dimension of the R matrix\&. 
.br
\fIc\fP Additional Dimension for the Q matrix\&. 
.RE
.PP

.PP
Definition at line 239 of file Rsimp\&.c\&.
.SS "void LP_free_space ()"

.PP
Deallocates space for LP data structures\&. Sets all LP globals to 0\&. 
.PP
Definition at line 57 of file Rsimp\&.c\&.
.SS "void LP_get_space (intM, intN)"

.PP
Allocate space for LP data structures\&. 
.PP
\fBParameters:\fP
.RS 4
\fIM\fP Number of rows\&. 
.br
\fIN\fP Number of columns\&. 
.RE
.PP

.PP
Definition at line 75 of file Rsimp\&.c\&.
.SS "void Print_LP ()"

.PP
print LP data structures to stdout\&. 
.PP
Definition at line 101 of file Rsimp\&.c\&.
.SS "int Rsimp (intm, intn, double **A, double *b, double *c, double *x, int *basis, int *nonbasis, double **R, double **Q, double *t1, double *t2)"

.PP
revised simplex method (Using Bland's rule) and a qr factorization to solve the linear equations 
.PP
.nf
Adapted from algorithms presented in 
         Linear Approximations and Extensions                  
         (theory and algorithms)
         Fang & Puthenpura
         Prentice Hall, Engelwood Cliffs NJ (1993)
  and 
        Linear Programming
        Chvatal 
        Freeman and Company, New York, 1983

  (developed first in Octave, many thanks to the author)

.fi
.PP
.PP
Solve the problem minimize C'x, subject to A*x=b, x>=0 for x,c,b n-vectors, and A an m,n matrix with full row rank
.PP
Assumptions: A mxn matrix with full row rank\&. b an m matrix\&. c an n-vector\&. x an n-vector holding a basic feasible solution, basis m-vector holding indices of the basic variables in x nonbasis n-m vector holding the indices not appearing in x\&.
.PP
Returns: LP_FAIL if algorithm doesn't terminate\&. LP_UNBD if problem is unbounded LP_OPT if optimum found efects: A,b,c unchanged\&. x basis, nonbasis, hold info describing last basic feasible solution\&. Q,R hold qrdecomp of last basis matrix\&. t1,t2 undefined\&.
.PP
\fBParameters:\fP
.RS 4
\fIm\fP Number of rows of A\&. 
.br
\fIn\fP Nubmer of colums of A\&. 
.br
\fIA\fP mxn matrix with full row rank\&. 
.br
\fIb\fP m matrix\&. 
.br
\fIc\fP an n-vector\&. 
.br
\fIx\fP an n-vector holding a basic feasible solution, basis m-vector holding indices of the basic variables in x nonbasis n-m vector holding the indices not appearing in x\&. 
.br
\fIR\fP Matrix for the QR factorization\&. 
.br
\fIQ\fP Matrix for the QR factorization\&. 
.br
\fIt1\fP Help-vector\&. 
.br
\fIt2\fP Help-vector\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
LP_FAIL if algorithm doesn't terminate\&. P_UNBD if problem is unbounded LP_OPT if optimum found 
.RE
.PP

.PP
Definition at line 122 of file Rsimp\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "double** LP_A"

.PP
Definition at line 28 of file Rsimp\&.c\&.
.SS "double* LP_B"

.PP
Definition at line 29 of file Rsimp\&.c\&.
.SS "int* LP_Basis"

.PP
Definition at line 32 of file Rsimp\&.c\&.
.SS "double* LP_C"

.PP
Definition at line 30 of file Rsimp\&.c\&.
.SS "int LP_M"

.PP
Definition at line 27 of file Rsimp\&.c\&.
.SS "int LP_MAX_M"

.PP
Definition at line 25 of file Rsimp\&.c\&.
.SS "int LP_MAX_N"

.PP
Definition at line 24 of file Rsimp\&.c\&.
.SS "int LP_N"

.PP
Definition at line 26 of file Rsimp\&.c\&.
.SS "int* LP_NonBasis"

.PP
Definition at line 33 of file Rsimp\&.c\&.
.SS "double** LP_Q"

.PP
Definition at line 34 of file Rsimp\&.c\&.
.SS "double** LP_R"

.PP
Definition at line 35 of file Rsimp\&.c\&.
.SS "double* LP_t1"

.PP
Definition at line 36 of file Rsimp\&.c\&.
.SS "double* LP_t2"

.PP
Definition at line 37 of file Rsimp\&.c\&.
.SS "double* LP_X"

.PP
Definition at line 31 of file Rsimp\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CIDGEL from the source code\&.
